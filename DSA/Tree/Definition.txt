Data structure are divided into 2 parts:
1. Linear Data Structures
   - These data structures organize data in a sequential manner.
   - Examples include arrays, linked lists, stacks, and queues.
2. Non-Linear Data Structures
   - These data structures organize data in a hierarchical or interconnected manner.    
    - Examples include trees and graphs.


Trees are a type of non-linear data structure that consist of nodes connected by edges. They are used to represent hierarchical relationships between elements.
A tree has the following characteristics:  
1. **Root Node**: The topmost node in the tree, which has no parent.
2. **Child Node**: A node that is directly connected to another node when moving away from the root.
3. **Parent Node**: A node that has one or more child nodes.       
4. **Leaf Node**: A node that does not have any children.
5. **Subtree**: A tree formed by a node and all its descendants.
6. **Height of a Node**: The number of edges on the longest path from the node to a leaf.
7. **Depth of a Node**: The number of edges from the root to the node
8. **Degree of a Node**: The number of children a node has.
9. **Level of a Node**: The level of a node is defined by the number of edges on the path from the root to that node. The root node is at level 0, its children are at level 1, and so on.
10. **Binary Tree**: A tree where each node has at most two children, referred to as the left child and the right child.
11. **Binary Search Tree (BST)**: A binary tree where the left child of a node contains only nodes with values less than the node's value, and the right child contains only nodes with values greater than the node's value.
12. **Balanced Tree**: A tree where the height of the left and right subtrees of any node differ by at most one.
13. **Complete Binary Tree**: A binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.
14. **Full Binary Tree**: A binary tree in which every node other than the leaves has exactly two children.
15. **Perfect Binary Tree**: A binary tree in which all internal nodes have two children and all leaves are at the same level.  
16. **AVL Tree**: A self-balancing binary search tree where the difference in heights between the left and right subtrees is at most one for all nodes.
17. **Red-Black Tree**: A balanced binary search tree where each node has an additional color attribute (red or black) to ensure balance during insertions and deletions.
18. **Trie**: A tree-like data structure used to store a dynamic set of strings, where each node represents a character of a string. It is commonly used for autocomplete and spell-checking applications.  